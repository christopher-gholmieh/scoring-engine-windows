# Written by: Christopher Gholmieh
# Imports:

# Cryptography:
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

# Arguments:
from argparse import ArgumentParser

# Loguru:
from loguru import logger

# OS:
import os


# Constants:
NONCE_SIZE: int = 12
KEY_SIZE: int = 32


# Functions:
def generate_encryption_key() -> bytes:
    return AESGCM.generate_key(bit_length=256)

def embed_bytes_into_array(byte_data: bytes, name: str) -> str:
    # Variables (Assignment):
    # HEX:
    hex_bytes = ", ".join(f"0x{byte:02x}" for byte in byte_data)

    # Logic:
    return f"unsigned char {name}[] = {{ {hex_bytes} }};\nunsigned int {name}_length = {len(byte_data)};\n"

def encrypt_configuration(
    yaml_path: str, output_path: str, source_file: str
) -> None:
    with open(yaml_path, "rb") as yaml_file:
        text: bytes = yaml_file.read()

    # Variables (Assignment):
    # Key:
    encryption_key: bytes = generate_encryption_key()

    logger.info(f"[+] AES Key (HEX): {encryption_key.hex()}")

    # Nonce:
    nonce = os.urandom(NONCE_SIZE)

    logger.info(f"[+] Nonce (HEX): {nonce.hex()}")

    # AESGCM:
    aesgcm: AESGCM = AESGCM(encryption_key)

    # Cipher:
    cipher_text: bytes = aesgcm.encrypt(nonce, text, associated_data=None)

    # Logic:
    with open(output_path, "wb") as output_file:
        output_file.write(nonce + cipher_text)

    # Functions:
    def to_rust_array(byte_data: bytes, name: str) -> str:
        # Variables (Assignment):
        # HEX:
        hex_bytes = ", ".join(f"0x{byte:02x}" for byte in byte_data)

        # Logic:
        return f"pub const {name}: [u8; {len(byte_data)}] = [ {hex_bytes} ];\n"

    # Logic:
    with open(source_file, "w") as rust_source:
        rust_source.writelines([
            "// Autogenerated by: configuration-parser.py\n",
            "// NOTE: Do not edit this manually!\n\n",
            "// Variables (Assignment):\n// Key:\n",
            to_rust_array(encryption_key, "AES_ENCRYPTION_KEY") + "\n\n",
            "// Nonce:\n",
            to_rust_array(nonce, "NONCE")
        ])

    logger.info(f"[+] Encrypted configuration written to {output_path}!")

def main() -> None:
    # Variables (Assignment):
    # Parser:
    parser: ArgumentParser = ArgumentParser(prog="configuration-parser.py")

    parser.add_argument("configuration_file")

    # Arguments:
    arguments = parser.parse_args()

    # Logic:
    encrypt_configuration(arguments.configuration_file, "configuration.dat", "./source/constants/constants.rs")

# Main:
if __name__ == "__main__":
    main()